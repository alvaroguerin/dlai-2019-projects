{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VAE_AutoEncoder.ipyn","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"5KEk5hu7BrSr","colab_type":"text"},"source":["\n","Ejercicio 1:\n","\n","Load MNIST train and test sets. Split the original training data into 95% training and 5% validation data.\n","Implement a convolutional autoencoder (with separate Encoder and Decoder modules). DONE\n","\n","Train the convolutional autoencoder, with different bottleneck sizes. Plot the train and validation loss curves of all autoencoders in the same figure. TODO\n","\n","Compute the avg. image reconstruction error (MSE) of the trained models on the MNIST validation and test sets. Show the results in a table, including #params of each model. TODO\n","\n","Select one of the autoencoders and feed it 5 random MNIST images from the test set. Show them along with their reconstructions. ALMOST DONE\n","\n","Generate 5 new images by injecting random values as input to the decoder. Show them. GOTTA DO THINGS BEFORE\n","\n"]},{"cell_type":"code","metadata":{"id":"XTT8RASHysZv","colab_type":"code","colab":{}},"source":["# Necessary imports, if we don't use them we'll kick them out\n","\n","import numpy as np\n","#We'll make it reproducible by using this seed\n","np.random.seed(1)\n","import torch\n","import torch.optim as optim\n","torch.manual_seed(1)\n","import torch.nn as nn\n","import torch.nn.functional as F\n","if torch.cuda.is_available():\n","  torch.cuda.manual_seed_all(1)\n","from torchvision import datasets, transforms\n","import matplotlib\n","%matplotlib inline\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BamL_wBRzAgn","colab_type":"code","outputId":"68fa2808-8efe-460a-9710-b3f4658e2f3c","executionInfo":{"status":"ok","timestamp":1575896715216,"user_tz":-60,"elapsed":5239,"user":{"displayName":"Carlos Hernández Pérez","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBPFwGa9SvvWF5_avBRY4dfjbWdyyxMQrrWCS3O=s64","userId":"15083082864962886251"}},"colab":{"base_uri":"https://localhost:8080/","height":290}},"source":["# Let's define some hyper-parameters that will be changed\n","hparams = {\n","    'batch_size':64,\n","    'num_epochs':10,\n","    'val_batch_size':64,\n","    'test_batch_size':64,\n","    'hidden_size':128,\n","    'num_classes':10,\n","    'num_inputs':784,\n","    'learning_rate':1e-3,\n","    'log_interval':100,\n","}\n","\n","mnist_trainset = datasets.MNIST('data', train=True, download=True,\n","                                transform=transforms.Compose([\n","                                    transforms.ToTensor(),\n","                                    transforms.Normalize((0.1307,), (0.3081,))\n","                                ]))\n","mnist_testset = datasets.MNIST('data', train=False, \n","                               transform=transforms.Compose([\n","                                   transforms.ToTensor(),\n","                                   transforms.Normalize((0.1307,), (0.3081,))\n","                               ]))\n","\n","\n","#Split the training into validation and training\n","train_dataset, validation_dataset = torch.utils.data.random_split(mnist_trainset, [int(0.95*length_train), int(0.05*length_train)])\n","\n","\n","# The argument \"drop_last=True\" is given in order to ensure that there won't be a last batch that is not full\n","train_loader = torch.utils.data.DataLoader(train_dataset,\n","                                            batch_size=hparams['batch_size'], \n","                                            shuffle=True,drop_last=True) #Probar si peta sin el drop_last pero no es prioritario\n","\n","val_loader = torch.utils.data.DataLoader(validation_dataset,\n","                                         batch_size=hparams['val_batch_size'], \n","                                         shuffle=True,drop_last=True)\n","test_loader = torch.utils.data.DataLoader(mnist_testset,\n","                                          batch_size=hparams['test_batch_size'], \n","                                          shuffle=False,drop_last=True)\n","\n","print(\"Thus we have {} full batches of train and {} full batches of validation\".format(len(train_loader),len(val_loader)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\r0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to data/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["9920512it [00:01, 9615773.23it/s]                            \n"],"name":"stderr"},{"output_type":"stream","text":["Extracting data/MNIST/raw/train-images-idx3-ubyte.gz to data/MNIST/raw\n"],"name":"stdout"},{"output_type":"stream","text":["  0%|          | 0/28881 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to data/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["32768it [00:00, 139805.16it/s]           \n","  0%|          | 0/1648877 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Extracting data/MNIST/raw/train-labels-idx1-ubyte.gz to data/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to data/MNIST/raw/t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["1654784it [00:00, 2295835.69it/s]                            \n","0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Extracting data/MNIST/raw/t10k-images-idx3-ubyte.gz to data/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["8192it [00:00, 51542.67it/s]            \n"],"name":"stderr"},{"output_type":"stream","text":["Extracting data/MNIST/raw/t10k-labels-idx1-ubyte.gz to data/MNIST/raw\n","Processing...\n","Done!\n","Thus we have 890 full batches of train and 46 full batches of validation\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"geOzlhtIDWzE","colab_type":"text"},"source":["Visualization of the data"]},{"cell_type":"code","metadata":{"id":"7IuBeKciDV-n","colab_type":"code","colab":{}},"source":["# Obtain a batch\n","for i in range(6):\n","  iterator = iter(train_loader)\n","  images, labels = iterator.next()\n","  # We have to transform the image from tensor to numpy\n","  images = images.numpy()\n","\n","  # Get first image of the batch\n","  digit = np.squeeze(images[i])\n","\n","  fig = plt.figure(figsize = (5,5))\n","  ax = fig.add_subplot(3,2,i+1)\n","  ax.imshow(digit, cmap = 'gray')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cz5vJtcyRVCr","colab_type":"code","colab":{}},"source":["class Encoder(nn.Module):\n","   ''' \n","   This the encoder part of CAE\n","   '''\n","\n","   def __init__(self, bottleneck):\n","     super().__init__()\n","\n","     self.conv1 = nn.Conv2d(1,16,3,padding=1)\n","     self.pool  = nn.MaxPool2d(2,2)\n","     self.conv2 = nn.Conv2d(16,4,3,padding=1)\n","     self.media = nn.Linear(4*7*7,bottleneck)\n","     self.vari  = nn.Linear(4*7*7,bottleneck)\n","\n","   def forward(self,x):\n","      ## encode ##\n","      # add hidden layers with relu activation function\n","      # and maxpooling after\n","      #print('input layer shape {}'.format(x.shape))\n","      x = F.relu(self.conv1(x))\n","      #print('first conv layer shape {}'.format(x.shape))\n","\n","      x = self.pool(x)\n","      #print('first pool layer shape {}'.format(x.shape))\n","\n","      # add second hidden layer\n","      x = F.relu(self.conv2(x))\n","      #print('second conv layer shape {}'.format(x.shape))\n","\n","      x = self.pool(x)  # compressed representation\n","    #  print('second pool layer shape {}'.format(x.shape))\n","      x = x.view(-1, 4 * 7 *7)\n","      z_media = self.media(x)\n","     # print(z_media.shape)\n","      z_var   = self.vari(x)\n","\n","      return z_media, z_var\n","\n","class Decoder(nn.Module):\n","   ''' \n","   This the decoder part of VAE\n","   '''\n","\n","   def __init__(self, bottleneck):\n","     super().__init__()\n","\n","     ## decoder layers ##\n","     ## a kernel of 2 and a stride of 2 will increase the spatial dims by 2\n","     self.linear = nn.Linear(bottleneck, 4*7*7)\n","     self.t_conv1 = nn.ConvTranspose2d(4, 16, 2, stride=2)\n","     self.t_conv2 = nn.ConvTranspose2d(16, 1, 2, stride=2)\n","\n","   def forward(self,x):\n","     ## decode ##\n","     # add transpose conv layers, with relu activation function\n","     x = F.relu(self.linear(x))\n","     x = x.view(-1, 4, 7, 7)\n","     x = F.relu(self.t_conv1(x))\n","     # output layer (with sigmoid for scaling from 0 to 1)\n","     x = F.sigmoid(self.t_conv2(x))\n","            \n","     return x\n","\n","class VAE(nn.Module):\n","  '''\n","  This takes both encoder and decoder into the same network\n","  '''\n","\n","  def __init__(self, enc, dec):\n","    super().__init__()\n","\n","    self.encoder = enc\n","    self.decoder = dec\n","\n","  def forward(self,x):\n","    #encode and reparametrize\n","\n","    #######################\n","    #                     #\n","    # is this done right? #\n","    #                     #  \n","    #######################\n","    z_media,z_vari = self.encoder(x)\n","    std = torch.exp(z_vari/2)\n","    eps = torch.rand_like(std)\n","    x_sample = eps.mul(std).add_(z_media)\n","\n","    \n","    #Decode\n","    predicted = self.decoder(x_sample)\n","\n","    return predicted,z_media,z_vari\n","      "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LO9z0o9BWFyy","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"colab_type":"code","id":"xRp5qgIvbTg1","colab":{}},"source":["encoder = Encoder(50)\n","decoder = Decoder(50)\n","model2 = VAE(encoder,decoder)\n","train(model2, 20)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NfR6Jm2VQN0L","colab_type":"text"},"source":["# Now we have to train the network for a number of epochs\n","In order to make this in a propper manner we define a train() function"]},{"cell_type":"code","metadata":{"id":"R-ayutM1QYyZ","colab_type":"code","colab":{}},"source":["def lossFunction(data,z_mu,z_var,x_sample):\n","\n","    # KLD is Kullback–Leibler divergence -- how much does one learned\n","    # distribution deviate from another, in this specific case the\n","    # learned distribution from the unit Gaussian\n","\n","    # see Appendix B from VAE paper:\n","    # Kingma and Welling. Auto-Encoding Variational Bayes. ICLR, 2014\n","    # https://arxiv.org/abs/1312.6114\n","    # - D_{KL} = 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)\n","    # note the negative D_{KL} in appendix B of the paper\n","\n","\n","      #######################\n","      #                     #\n","      # check later         #\n","      #                     #  \n","      #######################\n","\n","      # # This is our loss function\n","      # recon_loss = nn.functional.binary_cross_entropy(X_sample, data, reduction='sum')\n","\n","      # #Investigate on this\n","      # KLD = 0.5 * torch.sum(1 + z_var - z_mu.pow(2) - z_var.exp())\n","\n","    \n","\n","\n","\n","      #######################\n","      #                     #\n","      # is this done right? #\n","      #                     #  \n","      #######################\n","      # reconstruction loss\n","      # SIZE aVERAGE = False IS IMPORTANT\n","      recon_loss = F.binary_cross_entropy(x_sample, data, size_average=False, reduction='mean')\n","      # kl divergence loss\n","      kl_loss = 0.5 * torch.sum(torch.exp(z_var) + z_mu**2 - 1.0 - z_var)\n","      \n","      #print('recon_loss is {} and kl_loss is {}'.format(recon_loss.item(),kl_loss.item()))\n","      # total loss\n","      loss = recon_loss + kl_loss\n","      return loss\n","\n","\n","def train(model, num_epochs):\n","  # Prepare the GPU and the model to start training\n","  device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","  model.train()\n","  model.to(device)\n","  # First thing is first, specify loss function and optimizer criterion\n","  # The professor said we should used Mean Square Error\n","  # From the slides, ADAM was the best optimizer thus:\n","  optimizer = optim.Adam(model.parameters(), lr = hparams['learning_rate']) # learning rate chosen at random\n","  \n","  for epoch in range(num_epochs):\n","    # We should track the loss of the model\n","    closs = 0\n","  # total = 0\n","    for batch_idx, (data,_) in enumerate(train_loader):\n","      # Put data and label into GPU\n","      data = data.to(device)\n","      # What does the model say? Pix pix pix pix pix pix pix pix\n","      prediction, z_mu,z_var = model(data)\n","\n","\n","      loss = lossFunction(data,z_mu,z_var,prediction)\n","      closs += loss.item() #this data.size(0) is the train_batch_size\n","      # Careful with the drop_last\n","\n","      # Name a more iconic trio\n","      optimizer.zero_grad()\n","      loss.backward()\n","      optimizer.step()\n","\n","\n","    print('Epoch: {} \\tTraining Loss: {:.6f}'.format(epoch,closs/len(train_loader)))  \n","    # Let's check accuracy with our validation set\n","  #  correctHits = 0\n","\n","  # for index,(data,_)  in enumerate(val_loader):\n","  #   data = data.to(device)\n","  #   prediction = model(data)\n","  #   _,prediction = torch.max(prediction.data,1) #returns max as well as its index\n","  #   total += label.size(0)\n","  #   print('comparison number {} with prediction is {} and validation label is {}'.format(jj,prediction,label))\n","  #   correctHits += (prediction==label).sum().item()\n","  # print('Accuracy on epoch ',epoch+1,'= ',str((correctHits/total)*100))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sCOV0afqSzJx","colab_type":"code","outputId":"32e3f814-71c8-46d2-ab21-4087ec61c476","executionInfo":{"status":"ok","timestamp":1575896957898,"user_tz":-60,"elapsed":206750,"user":{"displayName":"Carlos Hernández Pérez","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBPFwGa9SvvWF5_avBRY4dfjbWdyyxMQrrWCS3O=s64","userId":"15083082864962886251"}},"colab":{"base_uri":"https://localhost:8080/","height":453}},"source":["encoder = Encoder(50)\n","decoder = Decoder(50)\n","model2 = VAE(encoder,decoder)\n","\n","train(model2,20)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torch/nn/functional.py:1351: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\n","  warnings.warn(\"nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\")\n","/usr/local/lib/python3.6/dist-packages/torch/nn/_reduction.py:43: UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead.\n","  warnings.warn(warning.format(ret))\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch: 0 \tTraining Loss: -555924.080473\n","Epoch: 1 \tTraining Loss: -1001118.863483\n","Epoch: 2 \tTraining Loss: -940274.252528\n","Epoch: 3 \tTraining Loss: -894193.704705\n","Epoch: 4 \tTraining Loss: -865703.321138\n","Epoch: 5 \tTraining Loss: -849926.713272\n","Epoch: 6 \tTraining Loss: -839955.296559\n","Epoch: 7 \tTraining Loss: -833685.873244\n","Epoch: 8 \tTraining Loss: -825751.739326\n","Epoch: 9 \tTraining Loss: -817140.249087\n","Epoch: 10 \tTraining Loss: -809802.433357\n","Epoch: 11 \tTraining Loss: -802699.493048\n","Epoch: 12 \tTraining Loss: -796315.087289\n","Epoch: 13 \tTraining Loss: -791322.607795\n","Epoch: 14 \tTraining Loss: -787916.839677\n","Epoch: 15 \tTraining Loss: -784219.188904\n","Epoch: 16 \tTraining Loss: -780791.316433\n","Epoch: 17 \tTraining Loss: -779914.505126\n","Epoch: 18 \tTraining Loss: -778483.212500\n","Epoch: 19 \tTraining Loss: -776310.982725\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"7ca2bbde-db9b-440f-e062-aa535018c3a6","executionInfo":{"status":"ok","timestamp":1575746101551,"user_tz":-60,"elapsed":2650,"user":{"displayName":"Carlos Hernández Pérez","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBPFwGa9SvvWF5_avBRY4dfjbWdyyxMQrrWCS3O=s64","userId":"15083082864962886251"}},"id":"Sh2vURyhi8-j","colab":{"base_uri":"https://localhost:8080/","height":327}},"source":["# https://graviraja.github.io/vanillavae/#\n","\n","# obtain one batch of test images\n","dataiter = iter(test_loader)\n","images, _ = dataiter.next()\n","\n","model2.eval()\n","model2.to(\"cpu\")\n","\n","# What does the model output?\n","prediction, z_mu,z_var = model2(images)\n","print(prediction.shape)\n","\n","# prep images for display\n","images = images.numpy()\n","\n","# output is resized into a batch of images\n","prediction = prediction.view(hparams['test_batch_size'], 1, 28, 28)\n","# use detach when it's an output that requires_grad and transform to numpy\n","prediction = prediction.detach().numpy()\n","\n","# plot the first ten input images and then reconstructed images\n","fig, axes = plt.subplots(nrows=2, ncols=10, sharex=True, sharey=True, figsize=(25,4))\n","\n","# input images on top row, reconstructions on bottom\n","for images, row in zip([images, prediction], axes):\n","    for img, ax in zip(images, row):\n","        ax.imshow(np.squeeze(img), cmap='gray')\n","        ax.get_xaxis().set_visible(False)\n","        ax.get_yaxis().set_visible(False)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torch/nn/functional.py:1351: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\n","  warnings.warn(\"nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\")\n"],"name":"stderr"},{"output_type":"stream","text":["torch.Size([64, 1, 28, 28])\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nl1cr//lT7Lua74k7cuTIaGzgwIEhfuedd2pSC7ElS5aEuPg5sf7665d83Re+8IUQ9+3bNxo755xz\nQlzu92uWRv43CLbaaqu6HIPmOOqoo6I83/O42Ju56JlnngnxTTfdVNvCGsSduAAAAAAACbOICwAA\nAACQsB7RTmHQoEEh/tnPfhaN9e7dO8rzj64+9thj9S2Mpss/grNo0aKq9zN37tyS+8k/PrLSSiuV\n3MfKK68c5ZW2hcg/4pJlWXb66aeH+IMPPqhoH1Rn7733Ljl2++23N7ASGiX/aFavXqX/DlrucdPL\nL788ytdYY42S2xaP0dnZ+UklfqzRo0dX9Trq74knnvjYuJZefvnlirbbeOONo/zpp5+uRznU2fbb\nbx/icuepW265pRHl0GaKn2/vv/9+lP/4xz9uZDm0oeuvvz7K8+0UDj744Ggs3xpPK8S03HvvvSXH\n8q2kiu0UFi9eHOIrr7wyGvvlL38Z5d/85jdDXK59EK1vm222CXHxc6Z///4lX1dsmXnccceF+MMP\nP6xRdY3lTlwAAAAAgIRZxAUAAAAASJhFXAAAAACAhLVlT9xin9uJEyeGeOjQodHYlClTovzb3/52\n/QojOU899VRN9vP73/8+xK+//no0tuqqq4a42MepHt54440Qn3feeXU/Xk+zww47hHi11VZrYiU0\nw2WXXRbi888/v+R2d9xxR5SX62XbnT63lW47fvz4ivdJ+8v3cs7HRXrgtof8b0EUzZw5M8QXXXRR\nI8qhDeR7COava7Msy956660o//vf/96QmmhfxWud/PXWvvvuG41997vfDfHvfve7aOzFF1+sQ3XU\nwt133x3i4vfVPn0+WqI6+uijo7Hhw4dH+c4771zR8WbMmNHNCklN/vc9VlhhhZLbFfu053tqZ1mW\n/eUvf6ltYU3gTlwAAAAAgIRZxAUAAAAASFhbtlMYNmxYlG+11VYltz3ppJOivNhegdZz1113RXnx\nsZt6OPDAA6t63eLFi0Nc7jHp2267LconTZpUctuHHnqoqlqozP777x/iYuuWxx9/PMQPPvhgw2qi\ncW666aYQn3rqqdHY4MGD6378t99+O8TPPfdcNHbMMceEuNjWhZ6tq6vrY2Pa02677VZybPr06SGe\nO3duI8qhDeTbKRTPIXfeeWfJ1xUfeR0wYECI83MRynniiSdC/J3vfCcau+CCC0L8gx/8IBo7/PDD\nQzx//vw6VUc18tew119/fTR20EEHlXzdyJEjS44tWbIkyvPnpjPOOKO7JdJkxc+P0047raLXXXPN\nNVF+//3316qkZLgTFwAAAAAgYRZxAQAAAAASZhEXAAAAACBhbdMTd5111gnx3XffXXK7Yg/DO+64\no2410Rxf/OIXozzfP6Vv374V72ejjTYK8cEHH1zx66644ooonzp1asltb7zxxhA///zzFR+Dxll+\n+eWjfM899yy57Q033BDiYl8m2sO0adNCfMghh0Rj++23X4hPPPHEuhz/vPPOC/Ell1xSl2PQfpZb\nbrmSY/oEtr7itU3xtyHyFixYEOJFixbVrSZ6juL1zmGHHRbib33rW9HYM888E+Ivf/nL9S2MtnT1\n1VdH+bHHHhvi4nfAcePGhfipp56qb2F0S/7a45vf/GY01r9//xCPGDEiGhsyZEiU579nT5gwIRo7\n55xzlrJKGi3/3j/77LPRWLl1nPz/7+J8akfuxAUAAAAASJhFXAAAAACAhLVNO4VjjjkmxGuvvXbJ\n7R544IEo7+rqqltNpOH8889f6n0ceuihNaiEVlR83HT27Nkhvu2226Kxiy66qCE1kYYHH3ywZF5s\n65P/jBo9enQ0lp9Hl19+eTTW0dER5cVHi6ASRxxxRIjnzJkTjZ177rmNLoca6+zsjPJJkyaFeOON\nN47GXnrppYbURM9x1FFHRflXv/rVEP/qV7+KxpxvWFpvv/12lI8aNSrExRZ2p59+eojzbT5Iy5tv\nvhnl+evkww8/PBrbdttto/x73/teiN966606VEcj7bLLLiFec801o7Fy63b51j35tlHtyp24AAAA\nAAAJs4gLAAAAAJAwi7gAAAAAAAlr2Z64O+ywQ5R//etfb1IlQDsr9sTdfvvtm1QJrWTixIllc2ik\nv/3tbyG+8MILo7H77ruv0eVQY0uWLInys846K8TFHnKTJ09uSE20lxNOOCHE48aNi8aK/eEvu+yy\nEOd/RyDLsmzhwoV1qI6ebPr06SG+5557orF99tknxBtuuGE05jcGWsOECRPK5rSXfN/0cj1wL7jg\ngijvadey7sQFAAAAAEiYRVwAAAAAgIS1bDuFHXfcMcr79+9fctspU6aEeN68eXWrCQAgNaNHj252\nCTTQa6+9FuIjjzyyiZXQLh5++OEQ77LLLk2sBEobM2ZMlD/55JMhHj58eDSmnQKkZ+DAgSHu6OiI\n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\n","text/plain":["<Figure size 1800x288 with 20 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"UWAMYbdDYGSo","colab_type":"code","outputId":"9b5f6757-cbdc-4f87-9425-891d99d17853","executionInfo":{"status":"ok","timestamp":1575897332623,"user_tz":-60,"elapsed":1537,"user":{"displayName":"Carlos Hernández Pérez","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBPFwGa9SvvWF5_avBRY4dfjbWdyyxMQrrWCS3O=s64","userId":"15083082864962886251"}},"colab":{"base_uri":"https://localhost:8080/","height":307}},"source":["# https://graviraja.github.io/vanillavae/#\n","\n","# obtain one batch of test images\n","dataiter = iter(test_loader)\n","images, _ = dataiter.next()\n","\n","model2.eval()\n","model2.to(\"cpu\")\n","\n","# What does the model output?\n","prediction, z_mu,z_var = model2(images)\n","print(prediction.shape)\n","\n","# prep images for display\n","images = images.numpy()\n","\n","# output is resized into a batch of images\n","prediction = prediction.view(hparams['test_batch_size'], 1, 28, 28)\n","# use detach when it's an output that requires_grad and transform to numpy\n","prediction = prediction.detach().numpy()\n","\n","# plot the first ten input images and then reconstructed images\n","fig, axes = plt.subplots(nrows=2, ncols=10, sharex=True, sharey=True, figsize=(25,4))\n","\n","# input images on top row, reconstructions on bottom\n","for images, row in zip([images, prediction], axes):\n","    for img, ax in zip(images, row):\n","        ax.imshow(np.squeeze(img), cmap='gray')\n","        ax.get_xaxis().set_visible(False)\n","        ax.get_yaxis().set_visible(False)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/torch/nn/functional.py:1351: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\n","  warnings.warn(\"nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.\")\n"],"name":"stderr"},{"output_type":"stream","text":["torch.Size([64, 1, 28, 28])\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nLa9W/vOn2Hc13xN39913j8b69+8f4g8//LAmtRBbvHhxiIufExtttFHJ133xi18Mce/evaOx8847\nL8Tlfr9mWeR/g2C77baryzFojmOPPTbK8z2Pi72Zi1555ZUQ33XXXbUtrEHciQsAAAAAkDCLuAAA\nAAAACesW7RQGDBgQ4h/96EfRWM+ePaM8/+jqM888U9/CaLr8IzgLFy6sej+zZ88uuZ/84yN9+/Yt\nuY/VVlstyittC5F/xCXLsuyss84K8dy5cyvaB9XZf//9S4796le/amAlNEr+0awePUr/P2i5x02v\nu+66KF9zzTVLbls8xpIlS/5RiUt1wAEHVPU66u/FF19calxLf/zjHyvabvPNN4/yl19+uR7lUGc7\n7bRTiMudp+6+++5GlEObKX6+ffrpp1H+gx/8oJHl0IZuu+22KM+3Uzj88MOjsXxrPK0Q0/LII4+U\nHMu3kiq2U1i0aFGIf/azn0Vj//M//xPlp512WojLtQ+i9e2www4hLn7OrLzyyiVfV2yZeeKJJ4b4\ns88+q1F1jeVOXAAAAACAhFnEBQAAAABImEVcAAAAAICEtWVP3GKf2wkTJoR4vfXWi8YmT54c5d/+\n9rfrVxjJeemll2qyn9tvvz3E7777bjS2xhprhLjYx6kepk+fHuILL7yw7sfrbnbeeecQDx48uImV\n0AxXX311iC+55JKS2913331RXq6XbVf63Fa67TXXXFPxPml/+V7O+bhID9z2kP8tiKKZM2eG+Ior\nrmhEObSBfA/B/HVtlmXZ+++/H+XPP/98Q2qifRWvdfLXWwcddFA09t3vfjfEv/zlL6OxN998sw7V\nUQsPPvhgiIvfV3v1+tsS1XHHHReNbbjhhlG+2267VXS8adOmdbFCUpP/fY9VVlml5HbFPu35ntpZ\nlmW/+c1valtYE7gTFwAAAAAgYRZxAQAAAAAS1pbtFDbYYIMo32677Upue8YZZ0R5sb0CreeBBx6I\n8uJjN/UwYsSIql63aNGiEJd7TPree++N8okTJ5bc9sknn6yqFipzyCGHhLjYuuWFF14I8RNPPNGw\nmmicu+66K8SjRo2KxgYOHFj348+YMSPEr732WjR2/PHHh7jY1oXurbOzc6kx7WnvvfcuOTZ16tQQ\nz549uxHl0Aby7RSK55D777+/5OuKj7z269cvxPm5COW8+OKLIf7Od74TjV166aUhvuiii6Kxo446\nKsTz5s2rU3VUI38Ne9ttt0Vjhx12WMnX7b777iXHFi9eHOX5c9PZZ5/d1RJpsuLnx+jRoyt63c03\n3xzljz32WK1KSoY7cQEAAAAAEmYRFwAAAAAgYRZxAQAAAAAS1jY9cdddd90QP/jggyW3K/YwvO++\n++pWE83x5S9/Ocrz/VN69+5d8X4222yzEB9++OEVv+7666+P8rfffrvktnfeeWeIX3/99YqPQeOs\nuOKKUb7vvvuW3PaOO+4IcbEvE+1hypQpIR45cmQ0dvDBB4f41FNPrcvxL7zwwhBfddVVdTkG7WeF\nFVYoOaZPYOsrXtsUfxsib/78+SFeuHBh3Wqi+yhe7xx55JEhPv3006OxV155JcRf/epX61sYbemm\nm26K8hNOOCHExe+AY8eODfFLL71U38Lokvy1x2mnnRaNrbzyyiEeNmxYNDZo0KAoz3/PHjduXDR2\n3nnnLWOVNFr+vX/11VejsXLrOPl/38X51I7ciQsAAAAAkDCLuAAAAAAACWubdgrHH398iNdZZ52S\n2z3++ONR3tnZWbeaSMMll1yyzPs44ogjalAJraj4uOmsWbNCfO+990ZjV1xxRUNqIg1PPPFEybzY\n1if/GXXAAQdEY/l5dN1110VjHR0dUV58tAgqcfTRR4f4o48+isbOP//8RpdDjS1ZsiTKJ06cGOLN\nN988GnvrrbcaUhPdx7HHHhvlX/va10L805/+NBpzvmFZzZgxI8r33HPPEBdb2J111lkhzrf5IC3v\nvfdelOevk4866qhobMcdd4zy733veyF+//3361AdjbTHHnuEeK211orGyq3b5Vv35NtGtSt34gIA\nAAAAJMwiLgAAAABAwiziAgAAAAAkrGV74u68885RfsoppzSpEqCdFXvi7rTTTk2qhFYyYcKEsjk0\n0rPPPhviyy67LBp79NFHG10ONbZ48eIoP/fcc0Nc7CH33HPPNaQm2svJJ58c4rFjx0Zjxf7wV199\ndYjzvyOQZVm2YMGCOlRHdzZ16tQQP/zww9HYgQceGOJNN900GvMbA61h3LhxZXPaS75verkeuJde\nemmUd7drWXfiAgAAAAAkzCIuAAAAAEDCWradwi677BLlK6+8csltJ0+eHOI5c+bUrSYAgNQccMAB\nzS6BBnrnnXdCfMwxxzSxEtrFU089FeI99tijiZVAacOHD4/ySZMmhXjDDTeMxrRTgPT0798/xB0d\n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\nwAAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1800x288 with 20 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"uieB4GacUthO","colab_type":"text"},"source":["I will leave this here as a reference but won't be used in the future as I have already detached the encoder from the decoder."]}]}